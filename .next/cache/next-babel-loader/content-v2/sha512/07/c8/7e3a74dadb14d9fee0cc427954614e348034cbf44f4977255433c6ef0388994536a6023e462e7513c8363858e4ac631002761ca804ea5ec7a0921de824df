{"ast":null,"code":"import _defineProperty from \"/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/pages/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useRef } from 'react';\nimport Board, { createTranslate } from 'react-trello';\nimport Router from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CSVLink } from 'react-csv';\nimport { NotificationManager } from 'react-notifications';\nimport Cookies from 'js-cookie';\nimport { savePhaseData } from '../store/actions/phaseStore';\nimport { logout } from '../store/actions/auth';\nimport axiosInstance from '../config/axios';\nimport SingleActionCard from \"../components/SingleActionCard\";\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n  var btnRef = useRef();\n  var thePhaseData = useSelector(function (state) {\n    return state.phaseData.phases;\n  });\n\n  var _useState = useState('Map Name'),\n      mapName = _useState[0],\n      setMapName = _useState[1];\n\n  var _useState2 = useState(thePhaseData),\n      phaseData = _useState2[0],\n      setPhaseData = _useState2[1];\n\n  var _useState3 = useState([]),\n      csvData = _useState3[0],\n      setCsvData = _useState3[1];\n\n  var _useState4 = useState(null),\n      currentCard = _useState4[0],\n      setCurrentCard = _useState4[1];\n\n  var _useState5 = useState([]),\n      currentPhase = _useState5[0],\n      setCurrentPhase = _useState5[1];\n\n  var _useState6 = useState(null),\n      phaseIndex = _useState6[0],\n      setPhaseIndex = _useState6[1]; // All phases data object\n\n\n  var data = {\n    lanes: phaseData\n  };\n  var TEXTS = {\n    \"Add another lane\": \"+ Add Phase\",\n    \"Click to add card\": \"Add actions\",\n    \"Delete lane\": \"Delete phase\",\n    \"Lane actions\": \"Phase actions\",\n    \"button\": {\n      \"Add lane\": \"Add Phase\",\n      \"Add card\": \"Add Action\",\n      \"Cancel\": \"Cancel\"\n    },\n    \"placeholder\": {\n      \"title\": \"action\",\n      \"description\": \"responsible\",\n      \"label\": \"output\"\n    }\n  }; // set export name\n\n  var mapNameHandler = function mapNameHandler(e) {\n    setMapName(e.target.value);\n  }; // Headers for csv export\n\n\n  var headers = [{\n    label: 'Phase',\n    key: 'phase'\n  }, {\n    label: 'Action',\n    key: 'action'\n  }, {\n    label: 'Responsible',\n    key: 'responsible'\n  }, {\n    label: 'Output',\n    key: 'output'\n  }, {\n    label: 'Notes',\n    key: 'notes'\n  }]; // Csv Export function\n\n  var csvReport = {\n    filename: mapName.split(' ').join('-') + '.csv',\n    headers: headers,\n    data: csvData\n  };\n\n  var dataChange = function dataChange(data) {\n    setPhaseData(data.lanes);\n    dispatch(savePhaseData([]));\n  }; // Funtion to open single action modal for edit\n\n\n  var cardClickHandler = function cardClickHandler(cardId, laneId) {\n    var currentPhase = phaseData.filter(function (phase) {\n      return phase.id === laneId;\n    });\n    var currentCard = currentPhase[0].cards.find(function (card) {\n      return card.id === cardId;\n    });\n    var currentPhaseIndex = phaseData.findIndex(function (phase) {\n      return phase.id === laneId;\n    });\n    setCurrentCard(currentCard);\n    setCurrentPhase(currentPhase);\n    setPhaseIndex(currentPhaseIndex);\n    $('#actionModal').modal('show');\n    console.log({\n      currentPhase: currentPhase\n    });\n  }; // Function to goto process background information page\n\n\n  var gotoProcessBginfoHandler = function gotoProcessBginfoHandler() {\n    dispatch(savePhaseData(phaseData));\n    Router.push('/process-background-information');\n  }; // const sendDataToDatase = async () => {\n  //     let phase = [];\n  //     data.lanes.map((lane => { \n  //         phase.push({\n  //             'title': lane.title,\n  //             'card': lane.cards.map((card) => ({\n  //                 'action': card.title,\n  //                 'responsibility': card.description\n  //             }))\n  //         });\n  //         console.log({phase});\n  //     }))\n  //     try {\n  //         const { data } = await axiosInstance.post('processes', {\n  //             process_name: mapName, \n  //             user_id: user.id,\n  //             phase: phase\n  //         }, {\n  //             headers: {\n  //                 Authorization: `Bearer ${token}`\n  //             }\n  //         });\n  //         console.log({data});\n  //         let dataToExport = [];\n  //         phaseData.forEach(phase => {\n  //             phase.cards.forEach(card => {\n  //                 dataToExport.push({\n  //                     'phase': phase.title,\n  //                     'action': card.title,\n  //                     'responsible': card.description\n  //                 });\n  //             })\n  //         });\n  //         await setCsvData(dataToExport);\n  //         btnRef.current.link.click();\n  //         dispatch(savePhaseData([]));\n  //     } catch(e) {\n  //         console.log(e);\n  //     }\n  // };\n  // const loginHandler = () => {\n  //     $('#authModal').modal('show');\n  // };\n  // const loginOutHandler = () => {\n  //     dispatch(logout());\n  //     NotificationManager.success('Logout successfully', '', 5000);\n  // };\n  // Export data function\n\n\n  var exportDataHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var dataToExport;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dataToExport = [];\n              phaseData.forEach(function (phase) {\n                phase.cards.forEach(function (card) {\n                  dataToExport.push({\n                    'phase': phase.title,\n                    'action': card.title,\n                    'responsible': card.description,\n                    'output': card.label ? card.label : '',\n                    'notes': card.metadata ? card.metadata : ''\n                  });\n                });\n              });\n              _context.next = 4;\n              return setCsvData(dataToExport);\n\n            case 4:\n              btnRef.current.link.click();\n              dispatch(savePhaseData([]));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function exportDataHandler() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Function to reset current Action card after an update/change\n\n\n  var resetDataAfterUpdate = function resetDataAfterUpdate() {\n    setCurrentCard(null);\n    setCurrentPhase([]);\n    setPhaseIndex(null);\n  }; // Function to store edited data to state\n\n\n  var storeEdittedDataToState = function storeEdittedDataToState(data) {\n    setPhaseData(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"page_manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 text-center d-flex align-items-center justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"mapName_input mx-3\",\n            type: \"text\",\n            value: mapName,\n            onChange: mapNameHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          data: data,\n          editLaneTitle: true,\n          editable: true,\n          canAddLanes: true,\n          onDataChange: dataChange,\n          t: createTranslate(TEXTS),\n          onCardClick: cardClickHandler,\n          laneDraggable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 20\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6 mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: gotoProcessBginfoHandler,\n            className: \"btn\",\n            children: \"Add process background\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(CSVLink, _objectSpread(_objectSpread({\n            className: \"d-none\",\n            ref: btnRef\n          }, csvReport), {}, {\n            children: \"Export\"\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: exportDataHandler,\n            className: \"btn\",\n            children: \"Export to data frame\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(SingleActionCard, {\n      currentCard: currentCard,\n      currentPhase: currentPhase,\n      phaseData: phaseData,\n      phaseIndex: phaseIndex,\n      resetDataAfterUpdate: resetDataAfterUpdate,\n      storeEdittedDataToState: storeEdittedDataToState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Home, \"sJuM8O6lUpmLjXknqQtHOAjsDdE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/pages/index.js"],"names":["React","useState","useRef","Board","createTranslate","Router","useSelector","useDispatch","CSVLink","NotificationManager","Cookies","savePhaseData","logout","axiosInstance","SingleActionCard","Home","dispatch","btnRef","thePhaseData","state","phaseData","phases","mapName","setMapName","setPhaseData","csvData","setCsvData","currentCard","setCurrentCard","currentPhase","setCurrentPhase","phaseIndex","setPhaseIndex","data","lanes","TEXTS","mapNameHandler","e","target","value","headers","label","key","csvReport","filename","split","join","dataChange","cardClickHandler","cardId","laneId","filter","phase","id","cards","find","card","currentPhaseIndex","findIndex","$","modal","console","log","gotoProcessBginfoHandler","push","exportDataHandler","dataToExport","forEach","title","description","metadata","current","link","click","resetDataAfterUpdate","storeEdittedDataToState"],"mappings":"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","sourcesContent":["\nimport React, { useState, useRef } from 'react';\nimport Board, { createTranslate } from 'react-trello';\nimport Router from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CSVLink } from 'react-csv';\nimport {NotificationManager} from 'react-notifications';\nimport Cookies from 'js-cookie';\n\nimport { savePhaseData } from '../store/actions/phaseStore';\nimport { logout } from '../store/actions/auth';\nimport axiosInstance from '../config/axios';\nimport SingleActionCard from \"../components/SingleActionCard\";\n\n\nconst Home = () => {\n\n    const dispatch = useDispatch();\n    const btnRef = useRef();\n\n    const thePhaseData = useSelector(state => state.phaseData.phases);\n\n    const [ mapName, setMapName ] = useState('Map Name');\n    const [phaseData, setPhaseData] = useState(thePhaseData);\n    const [csvData, setCsvData] = useState([]);\n    const [currentCard, setCurrentCard] = useState(null);\n    const [currentPhase, setCurrentPhase] = useState([]);\n    const [phaseIndex, setPhaseIndex] = useState(null);\n\n    // All phases data object\n    const data = {\n        lanes: phaseData\n    };\n    \n    const TEXTS = {\n        \"Add another lane\": \"+ Add Phase\",  \n        \"Click to add card\": \"Add actions\",\n        \"Delete lane\": \"Delete phase\",\n        \"Lane actions\": \"Phase actions\",\n        \"button\": {\n          \"Add lane\": \"Add Phase\",\n          \"Add card\": \"Add Action\",\n          \"Cancel\": \"Cancel\"\n        },\n        \"placeholder\": {\n          \"title\": \"action\",\n          \"description\": \"responsible\",\n          \"label\": \"output\"\n        }\n    };\n\n    // set export name\n    const mapNameHandler = (e) => {\n        setMapName(e.target.value);\n    };\n\n    // Headers for csv export\n    const headers = [\n        {label: 'Phase', key: 'phase'},\n        {label: 'Action', key: 'action'},\n        {label: 'Responsible', key: 'responsible'},\n        {label: 'Output', key: 'output'},\n        {label: 'Notes', key: 'notes'}\n    ];\n\n    // Csv Export function\n    const csvReport = {\n        filename: mapName.split(' ').join('-') + '.csv',\n        headers: headers,\n        data: csvData\n    };\n\n    const dataChange = (data) => {\n        setPhaseData(data.lanes);\n        dispatch(savePhaseData([]));\n    };\n\n    // Funtion to open single action modal for edit\n    const cardClickHandler = (cardId, laneId) => {\n        const currentPhase = phaseData.filter((phase) => phase.id === laneId);\n        const currentCard = currentPhase[0].cards.find((card) => card.id === cardId);\n        const currentPhaseIndex = phaseData.findIndex(phase => phase.id === laneId);\n\n        setCurrentCard(currentCard);\n        setCurrentPhase(currentPhase);\n        setPhaseIndex(currentPhaseIndex);\n\n        $('#actionModal').modal('show');\n\n        console.log({currentPhase});\n    };\n\n    // Function to goto process background information page\n    const gotoProcessBginfoHandler = () => {\n        dispatch(savePhaseData(phaseData));\n        Router.push('/process-background-information');\n    };\n\n    // const sendDataToDatase = async () => {\n    //     let phase = [];\n    //     data.lanes.map((lane => { \n    //         phase.push({\n    //             'title': lane.title,\n    //             'card': lane.cards.map((card) => ({\n    //                 'action': card.title,\n    //                 'responsibility': card.description\n    //             }))\n    //         });\n            \n    //         console.log({phase});\n    //     }))\n    //     try {\n    //         const { data } = await axiosInstance.post('processes', {\n    //             process_name: mapName, \n    //             user_id: user.id,\n    //             phase: phase\n    //         }, {\n    //             headers: {\n    //                 Authorization: `Bearer ${token}`\n    //             }\n    //         });\n    //         console.log({data});\n    //         let dataToExport = [];\n    //         phaseData.forEach(phase => {\n    //             phase.cards.forEach(card => {\n    //                 dataToExport.push({\n    //                     'phase': phase.title,\n    //                     'action': card.title,\n    //                     'responsible': card.description\n    //                 });\n    //             })\n    //         });\n\n    //         await setCsvData(dataToExport);\n    //         btnRef.current.link.click();\n    //         dispatch(savePhaseData([]));\n    //     } catch(e) {\n    //         console.log(e);\n    //     }\n    // };\n\n    // const loginHandler = () => {\n    //     $('#authModal').modal('show');\n    // };\n\n    // const loginOutHandler = () => {\n    //     dispatch(logout());\n    //     NotificationManager.success('Logout successfully', '', 5000);\n    // };\n\n\n    // Export data function\n    const exportDataHandler = async () => {\n        let dataToExport = [];\n        phaseData.forEach(phase => {\n            phase.cards.forEach(card => {\n                dataToExport.push({\n                    'phase': phase.title,\n                    'action': card.title,\n                    'responsible': card.description,\n                    'output': card.label ? card.label : '',\n                    'notes': card.metadata ? card.metadata : ''\n                });\n            })\n        });\n\n        await setCsvData(dataToExport);\n        btnRef.current.link.click();\n        dispatch(savePhaseData([]));\n    };\n\n    // Function to reset current Action card after an update/change\n    const resetDataAfterUpdate = () => {\n        setCurrentCard(null);\n        setCurrentPhase([]);\n        setPhaseIndex(null);\n    };\n\n    // Function to store edited data to state\n    const storeEdittedDataToState = (data) => {\n        setPhaseData(data);\n    };\n  \n\n    return (\n        <section className='page_manager'>\n            <div className=\"container-fluid\">  \n                <div className=\"row\">\n                    <div className=\"col-12 text-center d-flex align-items-center justify-content-center\">\n                        <input className='mapName_input mx-3' type=\"text\" value={mapName} onChange={mapNameHandler} />\n                        {/* {!loggedIn ? \n                        <button onClick={loginHandler} className='btn btn-login'>Login</button>\n                        :\n                        <button onClick={loginOutHandler} className='btn btn-login'>Logout</button>} */}\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                   <Board data={data}\n                    editLaneTitle\n                    editable\n                    canAddLanes={true}\n                    onDataChange={dataChange}\n                    t={createTranslate(TEXTS)}\n                    onCardClick={cardClickHandler}\n                    laneDraggable\n                    /> \n                </div>\n\n                <div className=\"row text-center\">\n                    <div className=\"col-md-6 mb-4\">\n                        <button onClick={gotoProcessBginfoHandler} className=\"btn\">Add process background</button>\n                    </div>\n                    <div className=\"col-md-6 mb-4\">\n                        <CSVLink className='d-none' ref={btnRef} {...csvReport}>Export</CSVLink>\n                        <button onClick={exportDataHandler} className=\"btn\">Export to data frame</button>\n                    </div>         \n                </div>\n            </div>\n            <SingleActionCard \n            currentCard={currentCard} \n            currentPhase={currentPhase}\n            phaseData={phaseData}\n            phaseIndex={phaseIndex}\n            resetDataAfterUpdate={resetDataAfterUpdate}\n            storeEdittedDataToState={storeEdittedDataToState}\n           />\n        </section>\n    )\n  \n};\n\nexport default Home;\n\n"]},"metadata":{},"sourceType":"module"}