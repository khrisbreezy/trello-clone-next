{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Provider } from \"react-redux\";\nimport App, { Container } from 'next/app';\nimport thunkMiddleware from \"redux-thunk\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport phaseData from \"../store/reducers/phaseStore\";\nimport '../styles/sass/main.scss';\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['']\n};\nconst reducers = combineReducers({\n  phaseData: persistReducer(persistConfig, phaseData)\n});\nconst store = process.env.environment === 'dev' ? createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware))) : createStore(reducers, applyMiddleware(thunkMiddleware));\nconst persistor = persistStore(store);\nexport default class extends App {\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return /*#__PURE__*/_jsx(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsx(PersistGate, {\n        persistor: persistor,\n        loading: null,\n        children: /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps))\n      })\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}