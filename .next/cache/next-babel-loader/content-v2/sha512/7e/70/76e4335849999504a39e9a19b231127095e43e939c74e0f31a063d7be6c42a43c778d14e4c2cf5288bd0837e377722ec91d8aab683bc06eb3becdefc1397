{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SAVE_PHASE_DATA, SAVE_PROCESS_DATA } from '../actions/phaseStore';\nconst initialState = {\n  phases: [],\n  processInfo: {}\n};\n\nconst phaseData = (state = initialState, action) => {\n  switch (action.type) {\n    case SAVE_PHASE_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        phases: action.data\n      });\n\n    case SAVE_PROCESS_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processInfo: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default phaseData;","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/store/reducers/phaseStore.js"],"names":["SAVE_PHASE_DATA","SAVE_PROCESS_DATA","initialState","phases","processInfo","phaseData","state","action","type","data"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,iBAA1B,QAAoD,uBAApD;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,WAAW,EAAE;AAFI,CAArB;;AAKA,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,eAAL;AACI,6CACOM,KADP;AAEIH,QAAAA,MAAM,EAAEI,MAAM,CAACE;AAFnB;;AAIJ,SAAKR,iBAAL;AACI,6CACOK,KADP;AAEIF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAFxB;;AAIJ;AACI,aAAOH,KAAP;AAZR;AAcH,CAfD;;AAiBA,eAAeD,SAAf","sourcesContent":["import { SAVE_PHASE_DATA, SAVE_PROCESS_DATA  } from '../actions/phaseStore';\n\nconst initialState = {\n    phases: [],\n    processInfo: {}\n}\n\nconst phaseData = (state = initialState, action) => {\n    switch (action.type) {\n        case SAVE_PHASE_DATA: \n            return {\n                ...state,\n                phases: action.data\n            }\n        case SAVE_PROCESS_DATA: \n            return {\n                ...state,\n                processInfo: action.data\n            }\n        default:\n            return state;\n    }\n};\n\nexport default phaseData;"]},"metadata":{},"sourceType":"module"}