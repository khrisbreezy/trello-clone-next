{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/pages/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useRef } from 'react';\nimport Board, { createTranslate } from 'react-trello';\nimport Router from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CSVLink } from 'react-csv';\nimport { NotificationManager } from 'react-notifications';\nimport Cookies from 'js-cookie';\nimport { savePhaseData } from '../store/actions/phaseStore';\nimport { logout } from '../store/actions/auth';\nimport axiosInstance from '../config/axios';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const btnRef = useRef();\n  const thePhaseData = useSelector(state => state.phaseData.phases);\n  const loggedIn = useSelector(state => state.auth.loggedIn);\n  const user = JSON.parse(Cookies.get(user)) || null;\n  console.log({\n    loggedIn\n  });\n  const {\n    0: mapName,\n    1: setMapName\n  } = useState('Map Name');\n  const {\n    0: phaseData,\n    1: setPhaseData\n  } = useState(thePhaseData);\n  const {\n    0: csvData,\n    1: setCsvData\n  } = useState([]);\n  const TEXTS = {\n    \"Add another lane\": \"+ Add Phase\",\n    \"Click to add card\": \"Add actions\",\n    \"Delete lane\": \"Delete phase\",\n    \"Lane actions\": \"Phase actions\",\n    \"button\": {\n      \"Add lane\": \"Add Phase\",\n      \"Add card\": \"Add Action\",\n      \"Cancel\": \"Cancel\"\n    },\n    \"placeholder\": {\n      \"title\": \"action\",\n      \"description\": \"responsible\",\n      \"label\": \"label\"\n    }\n  };\n\n  const mapNameHandler = e => {\n    setMapName(e.target.value);\n  };\n\n  const headers = [{\n    label: 'Phase',\n    key: 'phase'\n  }, {\n    label: 'Action',\n    key: 'action'\n  }, {\n    label: 'Responsible',\n    key: 'responsible'\n  }];\n  const csvReport = {\n    filename: mapName.split(' ').join('-') + '.csv',\n    headers: headers,\n    data: csvData\n  };\n  const data = {\n    lanes: phaseData\n  };\n\n  const dataChange = data => {\n    setPhaseData(data.lanes);\n    dispatch(savePhaseData([]));\n  };\n\n  const gotoProcessBginfoHandler = () => {\n    dispatch(savePhaseData(phaseData));\n    Router.push('/process-background-information');\n  };\n\n  const sendDataToDataase = async () => {\n    const {\n      data\n    } = await axiosInstance.post();\n  };\n\n  const exportDataHandler = async () => {\n    $('#authModal').modal('show');\n    return;\n    let dataToExport = [];\n    phaseData.forEach(phase => {\n      phase.cards.forEach(card => {\n        dataToExport.push({\n          'phase': phase.title,\n          'action': card.title,\n          'responsible': card.description\n        });\n      });\n    });\n    await setCsvData(dataToExport);\n    btnRef.current.link.click();\n    dispatch(savePhaseData([])); // setPhaseData([]);\n  };\n\n  const loginHandler = () => {\n    $('#authModal').modal('show');\n  };\n\n  const loginOutHandler = () => {\n    dispatch(logout());\n    NotificationManager.success('Logout successfully', '', 5000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"page_manager\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 text-center d-flex align-items-center justify-content-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"mapName_input mx-3\",\n            type: \"text\",\n            value: mapName,\n            onChange: mapNameHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), !loggedIn ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: loginHandler,\n            className: \"btn btn-login\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: loginOutHandler,\n            className: \"btn btn-login\",\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          data: data,\n          editable: true,\n          editLaneTitle: true,\n          canAddLanes: true,\n          onDataChange: dataChange,\n          t: createTranslate(TEXTS)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6 mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: gotoProcessBginfoHandler,\n            className: \"btn\",\n            children: \"Add process background\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(CSVLink, _objectSpread(_objectSpread({\n            className: \"d-none\",\n            ref: btnRef\n          }, csvReport), {}, {\n            children: \"Export\"\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: exportDataHandler,\n            className: \"btn\",\n            children: \"Export to data frame\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/pages/index.js"],"names":["React","useState","useRef","Board","createTranslate","Router","useSelector","useDispatch","CSVLink","NotificationManager","Cookies","savePhaseData","logout","axiosInstance","Home","dispatch","btnRef","thePhaseData","state","phaseData","phases","loggedIn","auth","user","JSON","parse","get","console","log","mapName","setMapName","setPhaseData","csvData","setCsvData","TEXTS","mapNameHandler","e","target","value","headers","label","key","csvReport","filename","split","join","data","lanes","dataChange","gotoProcessBginfoHandler","push","sendDataToDataase","post","exportDataHandler","$","modal","dataToExport","forEach","phase","cards","card","title","description","current","link","click","loginHandler","loginOutHandler","success"],"mappings":"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","sourcesContent":["\nimport React, { useState, useRef } from 'react';\nimport Board, { createTranslate } from 'react-trello';\nimport Router from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CSVLink } from 'react-csv';\nimport {NotificationManager} from 'react-notifications';\nimport Cookies from 'js-cookie';\n\nimport { savePhaseData } from '../store/actions/phaseStore';\nimport { logout } from '../store/actions/auth';\nimport axiosInstance from '../config/axios';\n\n\nconst Home = () => {\n\n    const dispatch = useDispatch();\n    const btnRef = useRef();\n\n    const thePhaseData = useSelector(state => state.phaseData.phases);\n    const loggedIn = useSelector(state => state.auth.loggedIn);\n    const user =  JSON.parse(Cookies.get(user)) || null;\n\n    console.log({loggedIn});  \n\n    const [ mapName, setMapName ] = useState('Map Name');\n    const [phaseData, setPhaseData] = useState(thePhaseData);\n    const [csvData, setCsvData] = useState([]);\n\n    const TEXTS = {\n        \"Add another lane\": \"+ Add Phase\",  \n        \"Click to add card\": \"Add actions\",\n        \"Delete lane\": \"Delete phase\",\n        \"Lane actions\": \"Phase actions\",\n        \"button\": {\n          \"Add lane\": \"Add Phase\",\n          \"Add card\": \"Add Action\",\n          \"Cancel\": \"Cancel\"\n        },\n        \"placeholder\": {\n          \"title\": \"action\",\n          \"description\": \"responsible\",\n          \"label\": \"label\"\n        }\n    };\n\n    const mapNameHandler = (e) => {\n        setMapName(e.target.value);\n    };\n\n    const headers = [\n        {label: 'Phase', key: 'phase'},\n        {label: 'Action', key: 'action'},\n        {label: 'Responsible', key: 'responsible'}\n    ];\n\n    const csvReport = {\n        filename: mapName.split(' ').join('-') + '.csv',\n        headers: headers,\n        data: csvData\n    };\n\n    const data = {\n        lanes: phaseData\n    };\n\n    const dataChange = (data) => {\n        setPhaseData(data.lanes);\n        dispatch(savePhaseData([]));\n    };\n\n    const gotoProcessBginfoHandler = () => {\n        dispatch(savePhaseData(phaseData));\n        Router.push('/process-background-information');\n    };\n\n    const sendDataToDataase = async () => {\n        const { data } = await axiosInstance.post()\n    };\n\n    const exportDataHandler = async () => {\n        $('#authModal').modal('show');\n        return;\n        let dataToExport = [];\n        phaseData.forEach(phase => {\n            phase.cards.forEach(card => {\n                dataToExport.push({\n                    'phase': phase.title,\n                    'action': card.title,\n                    'responsible': card.description\n                });\n            })\n        });\n\n        await setCsvData(dataToExport);\n        btnRef.current.link.click();\n        dispatch(savePhaseData([]));\n        // setPhaseData([]);\n    };\n\n    const loginHandler = () => {\n        $('#authModal').modal('show');\n    };\n\n    const loginOutHandler = () => {\n        dispatch(logout());\n        NotificationManager.success('Logout successfully', '', 5000);\n    }\n  \n\n    return (\n        <section className='page_manager'>\n            <div className=\"container-fluid\">  \n                <div className=\"row\">\n                    <div className=\"col-12 text-center d-flex align-items-center justify-content-center\">\n                        <input className='mapName_input mx-3' type=\"text\" value={mapName} onChange={mapNameHandler} />\n                        {!loggedIn ? \n                        <button onClick={loginHandler} className='btn btn-login'>Login</button>\n                        :\n                        <button onClick={loginOutHandler} className='btn btn-login'>Logout</button>}\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                   <Board data={data}\n                    editable editLaneTitle\n                    canAddLanes onDataChange={dataChange}\n                    t={createTranslate(TEXTS)}\n                    /> \n                </div>\n\n                <div className=\"row text-center\">\n                    <div className=\"col-md-6 mb-4\">\n                        <button onClick={gotoProcessBginfoHandler} className=\"btn\">Add process background</button>\n                    </div>\n                    <div className=\"col-md-6 mb-4\">\n                        <CSVLink className='d-none' ref={btnRef} {...csvReport}>Export</CSVLink>\n                        <button onClick={exportDataHandler} className=\"btn\">Export to data frame</button>\n                    </div>         \n                </div>\n            </div>\n        </section>\n    )\n  \n};\n\nexport default Home;\n\n"]},"metadata":{},"sourceType":"module"}