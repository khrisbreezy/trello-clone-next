{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/macbookpro/Desktop/Projects/React-Projects/trello-clone/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useRef } from 'react';\nimport Board, { createTranslate } from 'react-trello';\nimport Router from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CSVLink } from 'react-csv';\nimport { savePhaseData } from '../store/actions/phaseStore';\n\nvar Home = function Home() {\n  var dispatch = useDispatch();\n  var btnRef = useRef();\n  var thePhaseData = useSelector(function (state) {\n    return state.phaseData.phases;\n  });\n\n  var _useState = useState('Map Name'),\n      mapName = _useState[0],\n      setMapName = _useState[1];\n\n  var _useState2 = useState(thePhaseData),\n      phaseData = _useState2[0],\n      setPhaseData = _useState2[1];\n\n  var _useState3 = useState([]),\n      csvData = _useState3[0],\n      setCsvData = _useState3[1];\n\n  var TEXTS = {\n    \"Add another lane\": \"+ Add Phase\",\n    \"Click to add card\": \"Add actions\",\n    \"Delete lane\": \"Delete phase\",\n    \"Lane actions\": \"Phase actions\",\n    \"button\": {\n      \"Add lane\": \"Add Phase\",\n      \"Add card\": \"Add Phase\",\n      \"Cancel\": \"Cancel\"\n    },\n    \"placeholder\": {\n      \"title\": \"action\",\n      \"description\": \"responsible\",\n      \"label\": \"label\"\n    }\n  };\n\n  var mapNameHandler = function mapNameHandler(e) {\n    setMapName(e.target.value);\n  };\n\n  var headers = [{\n    label: 'Phase',\n    key: 'phase'\n  }, {\n    label: 'Action',\n    key: 'action'\n  }, {\n    label: 'Responsible',\n    key: 'responsible'\n  }];\n  var csvReport = {\n    filename: mapName.split(' ').join('-') + '.csv',\n    headers: headers,\n    data: csvData\n  };\n  var data = {\n    lanes: phaseData\n  };\n\n  var dataChange = function dataChange(data) {\n    setPhaseData(data.lanes);\n    dispatch(savePhaseData([]));\n  };\n\n  var gotoProcessBginfoHandler = function gotoProcessBginfoHandler() {\n    dispatch(savePhaseData(phaseData));\n    Router.push('/process-background-information');\n  };\n\n  var exportDataHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var dataToExport;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dataToExport = [];\n              phaseData.forEach(function (phase) {\n                phase.cards.forEach(function (card) {\n                  dataToExport.push({\n                    'phase': phase.title,\n                    'action': card.title,\n                    'responsible': card.description\n                  });\n                });\n              });\n              _context.next = 4;\n              return setCsvData(dataToExport);\n\n            case 4:\n              btnRef.current.link.click();\n              dispatch(savePhaseData([])); // setPhaseData([]);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function exportDataHandler() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(\"section\", {\n    className: \"page_manager\",\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"container-fluid\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12 text-center\",\n          children: /*#__PURE__*/_jsx(\"input\", {\n            className: \"mapName_input\",\n            type: \"text\",\n            value: mapName,\n            onChange: mapNameHandler\n          })\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsx(Board, {\n          data: data,\n          editable: true,\n          editLaneTitle: true,\n          canAddLanes: true,\n          onDataChange: dataChange,\n          t: createTranslate(TEXTS)\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"row mb-5 text-center\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"col-md-6\",\n          children: /*#__PURE__*/_jsx(\"button\", {\n            onClick: gotoProcessBginfoHandler,\n            className: \"btn\",\n            children: \"Add process background\"\n          })\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-md-6\",\n          children: [/*#__PURE__*/_jsx(CSVLink, _objectSpread(_objectSpread({\n            className: \"d-none\",\n            ref: btnRef\n          }, csvReport), {}, {\n            children: \"Export\"\n          })), /*#__PURE__*/_jsx(\"button\", {\n            onClick: exportDataHandler,\n            className: \"btn\",\n            children: \"Export to data frame\"\n          })]\n        })]\n      })]\n    })\n  });\n};\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}